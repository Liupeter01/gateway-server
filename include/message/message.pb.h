// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AuthoriseRequest;
struct AuthoriseRequestDefaultTypeInternal;
extern AuthoriseRequestDefaultTypeInternal _AuthoriseRequest_default_instance_;
class AuthoriseResponse;
struct AuthoriseResponseDefaultTypeInternal;
extern AuthoriseResponseDefaultTypeInternal _AuthoriseResponse_default_instance_;
class FriendRequest;
struct FriendRequestDefaultTypeInternal;
extern FriendRequestDefaultTypeInternal _FriendRequest_default_instance_;
class FriendResponse;
struct FriendResponseDefaultTypeInternal;
extern FriendResponseDefaultTypeInternal _FriendResponse_default_instance_;
class GetAllocatedChattingServer;
struct GetAllocatedChattingServerDefaultTypeInternal;
extern GetAllocatedChattingServerDefaultTypeInternal _GetAllocatedChattingServer_default_instance_;
class GetVerificationRequest;
struct GetVerificationRequestDefaultTypeInternal;
extern GetVerificationRequestDefaultTypeInternal _GetVerificationRequest_default_instance_;
class GetVerificationResponse;
struct GetVerificationResponseDefaultTypeInternal;
extern GetVerificationResponseDefaultTypeInternal _GetVerificationResponse_default_instance_;
class GrpcChattingServerRegRequest;
struct GrpcChattingServerRegRequestDefaultTypeInternal;
extern GrpcChattingServerRegRequestDefaultTypeInternal _GrpcChattingServerRegRequest_default_instance_;
class GrpcChattingServerResponse;
struct GrpcChattingServerResponseDefaultTypeInternal;
extern GrpcChattingServerResponseDefaultTypeInternal _GrpcChattingServerResponse_default_instance_;
class GrpcChattingServerShutdownRequest;
struct GrpcChattingServerShutdownRequestDefaultTypeInternal;
extern GrpcChattingServerShutdownRequestDefaultTypeInternal _GrpcChattingServerShutdownRequest_default_instance_;
class LoginChattingResponse;
struct LoginChattingResponseDefaultTypeInternal;
extern LoginChattingResponseDefaultTypeInternal _LoginChattingResponse_default_instance_;
class LoginChattingServer;
struct LoginChattingServerDefaultTypeInternal;
extern LoginChattingServerDefaultTypeInternal _LoginChattingServer_default_instance_;
class PeerListsRequest;
struct PeerListsRequestDefaultTypeInternal;
extern PeerListsRequestDefaultTypeInternal _PeerListsRequest_default_instance_;
class PeerResponse;
struct PeerResponseDefaultTypeInternal;
extern PeerResponseDefaultTypeInternal _PeerResponse_default_instance_;
class RegisterToBalancer;
struct RegisterToBalancerDefaultTypeInternal;
extern RegisterToBalancerDefaultTypeInternal _RegisterToBalancer_default_instance_;
class SendChattingMsgRequest;
struct SendChattingMsgRequestDefaultTypeInternal;
extern SendChattingMsgRequestDefaultTypeInternal _SendChattingMsgRequest_default_instance_;
class SendChattingMsgResponse;
struct SendChattingMsgResponseDefaultTypeInternal;
extern SendChattingMsgResponseDefaultTypeInternal _SendChattingMsgResponse_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AuthoriseRequest* Arena::CreateMaybeMessage<::message::AuthoriseRequest>(Arena*);
template<> ::message::AuthoriseResponse* Arena::CreateMaybeMessage<::message::AuthoriseResponse>(Arena*);
template<> ::message::FriendRequest* Arena::CreateMaybeMessage<::message::FriendRequest>(Arena*);
template<> ::message::FriendResponse* Arena::CreateMaybeMessage<::message::FriendResponse>(Arena*);
template<> ::message::GetAllocatedChattingServer* Arena::CreateMaybeMessage<::message::GetAllocatedChattingServer>(Arena*);
template<> ::message::GetVerificationRequest* Arena::CreateMaybeMessage<::message::GetVerificationRequest>(Arena*);
template<> ::message::GetVerificationResponse* Arena::CreateMaybeMessage<::message::GetVerificationResponse>(Arena*);
template<> ::message::GrpcChattingServerRegRequest* Arena::CreateMaybeMessage<::message::GrpcChattingServerRegRequest>(Arena*);
template<> ::message::GrpcChattingServerResponse* Arena::CreateMaybeMessage<::message::GrpcChattingServerResponse>(Arena*);
template<> ::message::GrpcChattingServerShutdownRequest* Arena::CreateMaybeMessage<::message::GrpcChattingServerShutdownRequest>(Arena*);
template<> ::message::LoginChattingResponse* Arena::CreateMaybeMessage<::message::LoginChattingResponse>(Arena*);
template<> ::message::LoginChattingServer* Arena::CreateMaybeMessage<::message::LoginChattingServer>(Arena*);
template<> ::message::PeerListsRequest* Arena::CreateMaybeMessage<::message::PeerListsRequest>(Arena*);
template<> ::message::PeerResponse* Arena::CreateMaybeMessage<::message::PeerResponse>(Arena*);
template<> ::message::RegisterToBalancer* Arena::CreateMaybeMessage<::message::RegisterToBalancer>(Arena*);
template<> ::message::SendChattingMsgRequest* Arena::CreateMaybeMessage<::message::SendChattingMsgRequest>(Arena*);
template<> ::message::SendChattingMsgResponse* Arena::CreateMaybeMessage<::message::SendChattingMsgResponse>(Arena*);
template<> ::message::ServerInfo* Arena::CreateMaybeMessage<::message::ServerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class GetVerificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVerificationRequest) */ {
 public:
  inline GetVerificationRequest() : GetVerificationRequest(nullptr) {}
  ~GetVerificationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVerificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVerificationRequest(const GetVerificationRequest& from);
  GetVerificationRequest(GetVerificationRequest&& from) noexcept
    : GetVerificationRequest() {
    *this = ::std::move(from);
  }

  inline GetVerificationRequest& operator=(const GetVerificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVerificationRequest& operator=(GetVerificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVerificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVerificationRequest* internal_default_instance() {
    return reinterpret_cast<const GetVerificationRequest*>(
               &_GetVerificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetVerificationRequest& a, GetVerificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVerificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVerificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVerificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVerificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVerificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVerificationRequest& from) {
    GetVerificationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVerificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVerificationRequest";
  }
  protected:
  explicit GetVerificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:message.GetVerificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetVerificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVerificationResponse) */ {
 public:
  inline GetVerificationResponse() : GetVerificationResponse(nullptr) {}
  ~GetVerificationResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVerificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVerificationResponse(const GetVerificationResponse& from);
  GetVerificationResponse(GetVerificationResponse&& from) noexcept
    : GetVerificationResponse() {
    *this = ::std::move(from);
  }

  inline GetVerificationResponse& operator=(const GetVerificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVerificationResponse& operator=(GetVerificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVerificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVerificationResponse* internal_default_instance() {
    return reinterpret_cast<const GetVerificationResponse*>(
               &_GetVerificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetVerificationResponse& a, GetVerificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVerificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVerificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVerificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVerificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVerificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVerificationResponse& from) {
    GetVerificationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVerificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVerificationResponse";
  }
  protected:
  explicit GetVerificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kMessageFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetVerificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegisterToBalancer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RegisterToBalancer) */ {
 public:
  inline RegisterToBalancer() : RegisterToBalancer(nullptr) {}
  ~RegisterToBalancer() override;
  explicit PROTOBUF_CONSTEXPR RegisterToBalancer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterToBalancer(const RegisterToBalancer& from);
  RegisterToBalancer(RegisterToBalancer&& from) noexcept
    : RegisterToBalancer() {
    *this = ::std::move(from);
  }

  inline RegisterToBalancer& operator=(const RegisterToBalancer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterToBalancer& operator=(RegisterToBalancer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterToBalancer& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterToBalancer* internal_default_instance() {
    return reinterpret_cast<const RegisterToBalancer*>(
               &_RegisterToBalancer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterToBalancer& a, RegisterToBalancer& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterToBalancer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterToBalancer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterToBalancer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterToBalancer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterToBalancer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterToBalancer& from) {
    RegisterToBalancer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToBalancer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RegisterToBalancer";
  }
  protected:
  explicit RegisterToBalancer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
  };
  // int32 uuid = 1;
  void clear_uuid();
  int32_t uuid() const;
  void set_uuid(int32_t value);
  private:
  int32_t _internal_uuid() const;
  void _internal_set_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RegisterToBalancer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetAllocatedChattingServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetAllocatedChattingServer) */ {
 public:
  inline GetAllocatedChattingServer() : GetAllocatedChattingServer(nullptr) {}
  ~GetAllocatedChattingServer() override;
  explicit PROTOBUF_CONSTEXPR GetAllocatedChattingServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllocatedChattingServer(const GetAllocatedChattingServer& from);
  GetAllocatedChattingServer(GetAllocatedChattingServer&& from) noexcept
    : GetAllocatedChattingServer() {
    *this = ::std::move(from);
  }

  inline GetAllocatedChattingServer& operator=(const GetAllocatedChattingServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllocatedChattingServer& operator=(GetAllocatedChattingServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllocatedChattingServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllocatedChattingServer* internal_default_instance() {
    return reinterpret_cast<const GetAllocatedChattingServer*>(
               &_GetAllocatedChattingServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetAllocatedChattingServer& a, GetAllocatedChattingServer& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllocatedChattingServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllocatedChattingServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllocatedChattingServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllocatedChattingServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllocatedChattingServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllocatedChattingServer& from) {
    GetAllocatedChattingServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllocatedChattingServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetAllocatedChattingServer";
  }
  protected:
  explicit GetAllocatedChattingServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kPortFieldNumber = 3,
    kTokenFieldNumber = 4,
    kErrorFieldNumber = 1,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetAllocatedChattingServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginChattingServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.LoginChattingServer) */ {
 public:
  inline LoginChattingServer() : LoginChattingServer(nullptr) {}
  ~LoginChattingServer() override;
  explicit PROTOBUF_CONSTEXPR LoginChattingServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginChattingServer(const LoginChattingServer& from);
  LoginChattingServer(LoginChattingServer&& from) noexcept
    : LoginChattingServer() {
    *this = ::std::move(from);
  }

  inline LoginChattingServer& operator=(const LoginChattingServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginChattingServer& operator=(LoginChattingServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginChattingServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginChattingServer* internal_default_instance() {
    return reinterpret_cast<const LoginChattingServer*>(
               &_LoginChattingServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginChattingServer& a, LoginChattingServer& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginChattingServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginChattingServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginChattingServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginChattingServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginChattingServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginChattingServer& from) {
    LoginChattingServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginChattingServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginChattingServer";
  }
  protected:
  explicit LoginChattingServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kUuidFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 uuid = 1;
  void clear_uuid();
  int32_t uuid() const;
  void set_uuid(int32_t value);
  private:
  int32_t _internal_uuid() const;
  void _internal_set_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginChattingServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginChattingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.LoginChattingResponse) */ {
 public:
  inline LoginChattingResponse() : LoginChattingResponse(nullptr) {}
  ~LoginChattingResponse() override;
  explicit PROTOBUF_CONSTEXPR LoginChattingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginChattingResponse(const LoginChattingResponse& from);
  LoginChattingResponse(LoginChattingResponse&& from) noexcept
    : LoginChattingResponse() {
    *this = ::std::move(from);
  }

  inline LoginChattingResponse& operator=(const LoginChattingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginChattingResponse& operator=(LoginChattingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginChattingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginChattingResponse* internal_default_instance() {
    return reinterpret_cast<const LoginChattingResponse*>(
               &_LoginChattingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginChattingResponse& a, LoginChattingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginChattingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginChattingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginChattingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginChattingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginChattingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginChattingResponse& from) {
    LoginChattingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginChattingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginChattingResponse";
  }
  protected:
  explicit LoginChattingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginChattingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHostFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:message.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PeerListsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.PeerListsRequest) */ {
 public:
  inline PeerListsRequest() : PeerListsRequest(nullptr) {}
  ~PeerListsRequest() override;
  explicit PROTOBUF_CONSTEXPR PeerListsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerListsRequest(const PeerListsRequest& from);
  PeerListsRequest(PeerListsRequest&& from) noexcept
    : PeerListsRequest() {
    *this = ::std::move(from);
  }

  inline PeerListsRequest& operator=(const PeerListsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerListsRequest& operator=(PeerListsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerListsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerListsRequest* internal_default_instance() {
    return reinterpret_cast<const PeerListsRequest*>(
               &_PeerListsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PeerListsRequest& a, PeerListsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerListsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerListsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerListsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerListsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeerListsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeerListsRequest& from) {
    PeerListsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerListsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.PeerListsRequest";
  }
  protected:
  explicit PeerListsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurServerFieldNumber = 1,
  };
  // string cur_server = 1;
  void clear_cur_server();
  const std::string& cur_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cur_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cur_server();
  PROTOBUF_NODISCARD std::string* release_cur_server();
  void set_allocated_cur_server(std::string* cur_server);
  private:
  const std::string& _internal_cur_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cur_server(const std::string& value);
  std::string* _internal_mutable_cur_server();
  public:

  // @@protoc_insertion_point(class_scope:message.PeerListsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_server_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PeerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.PeerResponse) */ {
 public:
  inline PeerResponse() : PeerResponse(nullptr) {}
  ~PeerResponse() override;
  explicit PROTOBUF_CONSTEXPR PeerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerResponse(const PeerResponse& from);
  PeerResponse(PeerResponse&& from) noexcept
    : PeerResponse() {
    *this = ::std::move(from);
  }

  inline PeerResponse& operator=(const PeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerResponse& operator=(PeerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerResponse* internal_default_instance() {
    return reinterpret_cast<const PeerResponse*>(
               &_PeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PeerResponse& a, PeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeerResponse& from) {
    PeerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.PeerResponse";
  }
  protected:
  explicit PeerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListsFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .message.ServerInfo lists = 2;
  int lists_size() const;
  private:
  int _internal_lists_size() const;
  public:
  void clear_lists();
  ::message::ServerInfo* mutable_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ServerInfo >*
      mutable_lists();
  private:
  const ::message::ServerInfo& _internal_lists(int index) const;
  ::message::ServerInfo* _internal_add_lists();
  public:
  const ::message::ServerInfo& lists(int index) const;
  ::message::ServerInfo* add_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ServerInfo >&
      lists() const;

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.PeerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ServerInfo > lists_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GrpcChattingServerRegRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GrpcChattingServerRegRequest) */ {
 public:
  inline GrpcChattingServerRegRequest() : GrpcChattingServerRegRequest(nullptr) {}
  ~GrpcChattingServerRegRequest() override;
  explicit PROTOBUF_CONSTEXPR GrpcChattingServerRegRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrpcChattingServerRegRequest(const GrpcChattingServerRegRequest& from);
  GrpcChattingServerRegRequest(GrpcChattingServerRegRequest&& from) noexcept
    : GrpcChattingServerRegRequest() {
    *this = ::std::move(from);
  }

  inline GrpcChattingServerRegRequest& operator=(const GrpcChattingServerRegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrpcChattingServerRegRequest& operator=(GrpcChattingServerRegRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrpcChattingServerRegRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrpcChattingServerRegRequest* internal_default_instance() {
    return reinterpret_cast<const GrpcChattingServerRegRequest*>(
               &_GrpcChattingServerRegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GrpcChattingServerRegRequest& a, GrpcChattingServerRegRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GrpcChattingServerRegRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrpcChattingServerRegRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrpcChattingServerRegRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrpcChattingServerRegRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrpcChattingServerRegRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrpcChattingServerRegRequest& from) {
    GrpcChattingServerRegRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrpcChattingServerRegRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GrpcChattingServerRegRequest";
  }
  protected:
  explicit GrpcChattingServerRegRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .message.ServerInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::message::ServerInfo& info() const;
  PROTOBUF_NODISCARD ::message::ServerInfo* release_info();
  ::message::ServerInfo* mutable_info();
  void set_allocated_info(::message::ServerInfo* info);
  private:
  const ::message::ServerInfo& _internal_info() const;
  ::message::ServerInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::message::ServerInfo* info);
  ::message::ServerInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:message.GrpcChattingServerRegRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::ServerInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GrpcChattingServerShutdownRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GrpcChattingServerShutdownRequest) */ {
 public:
  inline GrpcChattingServerShutdownRequest() : GrpcChattingServerShutdownRequest(nullptr) {}
  ~GrpcChattingServerShutdownRequest() override;
  explicit PROTOBUF_CONSTEXPR GrpcChattingServerShutdownRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrpcChattingServerShutdownRequest(const GrpcChattingServerShutdownRequest& from);
  GrpcChattingServerShutdownRequest(GrpcChattingServerShutdownRequest&& from) noexcept
    : GrpcChattingServerShutdownRequest() {
    *this = ::std::move(from);
  }

  inline GrpcChattingServerShutdownRequest& operator=(const GrpcChattingServerShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrpcChattingServerShutdownRequest& operator=(GrpcChattingServerShutdownRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrpcChattingServerShutdownRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrpcChattingServerShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const GrpcChattingServerShutdownRequest*>(
               &_GrpcChattingServerShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GrpcChattingServerShutdownRequest& a, GrpcChattingServerShutdownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GrpcChattingServerShutdownRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrpcChattingServerShutdownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrpcChattingServerShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrpcChattingServerShutdownRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrpcChattingServerShutdownRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrpcChattingServerShutdownRequest& from) {
    GrpcChattingServerShutdownRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrpcChattingServerShutdownRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GrpcChattingServerShutdownRequest";
  }
  protected:
  explicit GrpcChattingServerShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurServerFieldNumber = 1,
  };
  // string cur_server = 1;
  void clear_cur_server();
  const std::string& cur_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cur_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cur_server();
  PROTOBUF_NODISCARD std::string* release_cur_server();
  void set_allocated_cur_server(std::string* cur_server);
  private:
  const std::string& _internal_cur_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cur_server(const std::string& value);
  std::string* _internal_mutable_cur_server();
  public:

  // @@protoc_insertion_point(class_scope:message.GrpcChattingServerShutdownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_server_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GrpcChattingServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GrpcChattingServerResponse) */ {
 public:
  inline GrpcChattingServerResponse() : GrpcChattingServerResponse(nullptr) {}
  ~GrpcChattingServerResponse() override;
  explicit PROTOBUF_CONSTEXPR GrpcChattingServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrpcChattingServerResponse(const GrpcChattingServerResponse& from);
  GrpcChattingServerResponse(GrpcChattingServerResponse&& from) noexcept
    : GrpcChattingServerResponse() {
    *this = ::std::move(from);
  }

  inline GrpcChattingServerResponse& operator=(const GrpcChattingServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrpcChattingServerResponse& operator=(GrpcChattingServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrpcChattingServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrpcChattingServerResponse* internal_default_instance() {
    return reinterpret_cast<const GrpcChattingServerResponse*>(
               &_GrpcChattingServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GrpcChattingServerResponse& a, GrpcChattingServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GrpcChattingServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrpcChattingServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrpcChattingServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrpcChattingServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrpcChattingServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrpcChattingServerResponse& from) {
    GrpcChattingServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrpcChattingServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GrpcChattingServerResponse";
  }
  protected:
  explicit GrpcChattingServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.GrpcChattingServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.FriendRequest) */ {
 public:
  inline FriendRequest() : FriendRequest(nullptr) {}
  ~FriendRequest() override;
  explicit PROTOBUF_CONSTEXPR FriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRequest(const FriendRequest& from);
  FriendRequest(FriendRequest&& from) noexcept
    : FriendRequest() {
    *this = ::std::move(from);
  }

  inline FriendRequest& operator=(const FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequest& operator=(FriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRequest* internal_default_instance() {
    return reinterpret_cast<const FriendRequest*>(
               &_FriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendRequest& a, FriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendRequest& from) {
    FriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.FriendRequest";
  }
  protected:
  explicit FriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 3,
    kReqMsgFieldNumber = 4,
    kAvatorPathFieldNumber = 5,
    kUsernameFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kSrcUuidFieldNumber = 1,
    kDstUuidFieldNumber = 2,
    kSexFieldNumber = 8,
  };
  // string nick_name = 3;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string req_msg = 4;
  void clear_req_msg();
  const std::string& req_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_req_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_req_msg();
  PROTOBUF_NODISCARD std::string* release_req_msg();
  void set_allocated_req_msg(std::string* req_msg);
  private:
  const std::string& _internal_req_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_req_msg(const std::string& value);
  std::string* _internal_mutable_req_msg();
  public:

  // string avator_path = 5;
  void clear_avator_path();
  const std::string& avator_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avator_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avator_path();
  PROTOBUF_NODISCARD std::string* release_avator_path();
  void set_allocated_avator_path(std::string* avator_path);
  private:
  const std::string& _internal_avator_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avator_path(const std::string& value);
  std::string* _internal_mutable_avator_path();
  public:

  // string username = 6;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string description = 7;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 src_uuid = 1;
  void clear_src_uuid();
  int32_t src_uuid() const;
  void set_src_uuid(int32_t value);
  private:
  int32_t _internal_src_uuid() const;
  void _internal_set_src_uuid(int32_t value);
  public:

  // int32 dst_uuid = 2;
  void clear_dst_uuid();
  int32_t dst_uuid() const;
  void set_dst_uuid(int32_t value);
  private:
  int32_t _internal_dst_uuid() const;
  void _internal_set_dst_uuid(int32_t value);
  public:

  // int32 sex = 8;
  void clear_sex();
  int32_t sex() const;
  void set_sex(int32_t value);
  private:
  int32_t _internal_sex() const;
  void _internal_set_sex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.FriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avator_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    int32_t src_uuid_;
    int32_t dst_uuid_;
    int32_t sex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.FriendResponse) */ {
 public:
  inline FriendResponse() : FriendResponse(nullptr) {}
  ~FriendResponse() override;
  explicit PROTOBUF_CONSTEXPR FriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendResponse(const FriendResponse& from);
  FriendResponse(FriendResponse&& from) noexcept
    : FriendResponse() {
    *this = ::std::move(from);
  }

  inline FriendResponse& operator=(const FriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendResponse& operator=(FriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendResponse* internal_default_instance() {
    return reinterpret_cast<const FriendResponse*>(
               &_FriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FriendResponse& a, FriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendResponse& from) {
    FriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.FriendResponse";
  }
  protected:
  explicit FriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kSrcUuidFieldNumber = 2,
    kDstUuidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 src_uuid = 2;
  void clear_src_uuid();
  int32_t src_uuid() const;
  void set_src_uuid(int32_t value);
  private:
  int32_t _internal_src_uuid() const;
  void _internal_set_src_uuid(int32_t value);
  public:

  // int32 dst_uuid = 3;
  void clear_dst_uuid();
  int32_t dst_uuid() const;
  void set_dst_uuid(int32_t value);
  private:
  int32_t _internal_dst_uuid() const;
  void _internal_set_dst_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.FriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t src_uuid_;
    int32_t dst_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AuthoriseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AuthoriseRequest) */ {
 public:
  inline AuthoriseRequest() : AuthoriseRequest(nullptr) {}
  ~AuthoriseRequest() override;
  explicit PROTOBUF_CONSTEXPR AuthoriseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthoriseRequest(const AuthoriseRequest& from);
  AuthoriseRequest(AuthoriseRequest&& from) noexcept
    : AuthoriseRequest() {
    *this = ::std::move(from);
  }

  inline AuthoriseRequest& operator=(const AuthoriseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthoriseRequest& operator=(AuthoriseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthoriseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthoriseRequest* internal_default_instance() {
    return reinterpret_cast<const AuthoriseRequest*>(
               &_AuthoriseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AuthoriseRequest& a, AuthoriseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthoriseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthoriseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthoriseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthoriseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthoriseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthoriseRequest& from) {
    AuthoriseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthoriseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AuthoriseRequest";
  }
  protected:
  explicit AuthoriseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcUuidFieldNumber = 1,
    kDstUuidFieldNumber = 2,
  };
  // int32 src_uuid = 1;
  void clear_src_uuid();
  int32_t src_uuid() const;
  void set_src_uuid(int32_t value);
  private:
  int32_t _internal_src_uuid() const;
  void _internal_set_src_uuid(int32_t value);
  public:

  // int32 dst_uuid = 2;
  void clear_dst_uuid();
  int32_t dst_uuid() const;
  void set_dst_uuid(int32_t value);
  private:
  int32_t _internal_dst_uuid() const;
  void _internal_set_dst_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AuthoriseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t src_uuid_;
    int32_t dst_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AuthoriseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AuthoriseResponse) */ {
 public:
  inline AuthoriseResponse() : AuthoriseResponse(nullptr) {}
  ~AuthoriseResponse() override;
  explicit PROTOBUF_CONSTEXPR AuthoriseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthoriseResponse(const AuthoriseResponse& from);
  AuthoriseResponse(AuthoriseResponse&& from) noexcept
    : AuthoriseResponse() {
    *this = ::std::move(from);
  }

  inline AuthoriseResponse& operator=(const AuthoriseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthoriseResponse& operator=(AuthoriseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthoriseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthoriseResponse* internal_default_instance() {
    return reinterpret_cast<const AuthoriseResponse*>(
               &_AuthoriseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AuthoriseResponse& a, AuthoriseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthoriseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthoriseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthoriseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthoriseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthoriseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthoriseResponse& from) {
    AuthoriseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthoriseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AuthoriseResponse";
  }
  protected:
  explicit AuthoriseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kSrcUuidFieldNumber = 2,
    kDstUuidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 src_uuid = 2;
  void clear_src_uuid();
  int32_t src_uuid() const;
  void set_src_uuid(int32_t value);
  private:
  int32_t _internal_src_uuid() const;
  void _internal_set_src_uuid(int32_t value);
  public:

  // int32 dst_uuid = 3;
  void clear_dst_uuid();
  int32_t dst_uuid() const;
  void set_dst_uuid(int32_t value);
  private:
  int32_t _internal_dst_uuid() const;
  void _internal_set_dst_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AuthoriseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t src_uuid_;
    int32_t dst_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendChattingMsgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SendChattingMsgRequest) */ {
 public:
  inline SendChattingMsgRequest() : SendChattingMsgRequest(nullptr) {}
  ~SendChattingMsgRequest() override;
  explicit PROTOBUF_CONSTEXPR SendChattingMsgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChattingMsgRequest(const SendChattingMsgRequest& from);
  SendChattingMsgRequest(SendChattingMsgRequest&& from) noexcept
    : SendChattingMsgRequest() {
    *this = ::std::move(from);
  }

  inline SendChattingMsgRequest& operator=(const SendChattingMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChattingMsgRequest& operator=(SendChattingMsgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChattingMsgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChattingMsgRequest* internal_default_instance() {
    return reinterpret_cast<const SendChattingMsgRequest*>(
               &_SendChattingMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SendChattingMsgRequest& a, SendChattingMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChattingMsgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChattingMsgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChattingMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChattingMsgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendChattingMsgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendChattingMsgRequest& from) {
    SendChattingMsgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChattingMsgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SendChattingMsgRequest";
  }
  protected:
  explicit SendChattingMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSrcUuidFieldNumber = 1,
    kDstUuidFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 src_uuid = 1;
  void clear_src_uuid();
  int32_t src_uuid() const;
  void set_src_uuid(int32_t value);
  private:
  int32_t _internal_src_uuid() const;
  void _internal_set_src_uuid(int32_t value);
  public:

  // int32 dst_uuid = 2;
  void clear_dst_uuid();
  int32_t dst_uuid() const;
  void set_dst_uuid(int32_t value);
  private:
  int32_t _internal_dst_uuid() const;
  void _internal_set_dst_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SendChattingMsgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t src_uuid_;
    int32_t dst_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendChattingMsgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SendChattingMsgResponse) */ {
 public:
  inline SendChattingMsgResponse() : SendChattingMsgResponse(nullptr) {}
  ~SendChattingMsgResponse() override;
  explicit PROTOBUF_CONSTEXPR SendChattingMsgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChattingMsgResponse(const SendChattingMsgResponse& from);
  SendChattingMsgResponse(SendChattingMsgResponse&& from) noexcept
    : SendChattingMsgResponse() {
    *this = ::std::move(from);
  }

  inline SendChattingMsgResponse& operator=(const SendChattingMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChattingMsgResponse& operator=(SendChattingMsgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChattingMsgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChattingMsgResponse* internal_default_instance() {
    return reinterpret_cast<const SendChattingMsgResponse*>(
               &_SendChattingMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SendChattingMsgResponse& a, SendChattingMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChattingMsgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChattingMsgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChattingMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChattingMsgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendChattingMsgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendChattingMsgResponse& from) {
    SendChattingMsgResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChattingMsgResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SendChattingMsgResponse";
  }
  protected:
  explicit SendChattingMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kSrcUuidFieldNumber = 2,
    kDstUuidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 src_uuid = 2;
  void clear_src_uuid();
  int32_t src_uuid() const;
  void set_src_uuid(int32_t value);
  private:
  int32_t _internal_src_uuid() const;
  void _internal_set_src_uuid(int32_t value);
  public:

  // int32 dst_uuid = 3;
  void clear_dst_uuid();
  int32_t dst_uuid() const;
  void set_dst_uuid(int32_t value);
  private:
  int32_t _internal_dst_uuid() const;
  void _internal_set_dst_uuid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SendChattingMsgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t src_uuid_;
    int32_t dst_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVerificationRequest

// string email = 1;
inline void GetVerificationRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& GetVerificationRequest::email() const {
  // @@protoc_insertion_point(field_get:message.GetVerificationRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVerificationRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetVerificationRequest.email)
}
inline std::string* GetVerificationRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:message.GetVerificationRequest.email)
  return _s;
}
inline const std::string& GetVerificationRequest::_internal_email() const {
  return _impl_.email_.Get();
}
inline void GetVerificationRequest::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVerificationRequest::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVerificationRequest::release_email() {
  // @@protoc_insertion_point(field_release:message.GetVerificationRequest.email)
  return _impl_.email_.Release();
}
inline void GetVerificationRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetVerificationRequest.email)
}

// -------------------------------------------------------------------

// GetVerificationResponse

// int32 error = 1;
inline void GetVerificationResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t GetVerificationResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t GetVerificationResponse::error() const {
  // @@protoc_insertion_point(field_get:message.GetVerificationResponse.error)
  return _internal_error();
}
inline void GetVerificationResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void GetVerificationResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetVerificationResponse.error)
}

// string email = 2;
inline void GetVerificationResponse::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& GetVerificationResponse::email() const {
  // @@protoc_insertion_point(field_get:message.GetVerificationResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVerificationResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetVerificationResponse.email)
}
inline std::string* GetVerificationResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:message.GetVerificationResponse.email)
  return _s;
}
inline const std::string& GetVerificationResponse::_internal_email() const {
  return _impl_.email_.Get();
}
inline void GetVerificationResponse::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVerificationResponse::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVerificationResponse::release_email() {
  // @@protoc_insertion_point(field_release:message.GetVerificationResponse.email)
  return _impl_.email_.Release();
}
inline void GetVerificationResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetVerificationResponse.email)
}

// string message = 3;
inline void GetVerificationResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetVerificationResponse::message() const {
  // @@protoc_insertion_point(field_get:message.GetVerificationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVerificationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetVerificationResponse.message)
}
inline std::string* GetVerificationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:message.GetVerificationResponse.message)
  return _s;
}
inline const std::string& GetVerificationResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetVerificationResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVerificationResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVerificationResponse::release_message() {
  // @@protoc_insertion_point(field_release:message.GetVerificationResponse.message)
  return _impl_.message_.Release();
}
inline void GetVerificationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetVerificationResponse.message)
}

// -------------------------------------------------------------------

// RegisterToBalancer

// int32 uuid = 1;
inline void RegisterToBalancer::clear_uuid() {
  _impl_.uuid_ = 0;
}
inline int32_t RegisterToBalancer::_internal_uuid() const {
  return _impl_.uuid_;
}
inline int32_t RegisterToBalancer::uuid() const {
  // @@protoc_insertion_point(field_get:message.RegisterToBalancer.uuid)
  return _internal_uuid();
}
inline void RegisterToBalancer::_internal_set_uuid(int32_t value) {
  
  _impl_.uuid_ = value;
}
inline void RegisterToBalancer::set_uuid(int32_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:message.RegisterToBalancer.uuid)
}

// -------------------------------------------------------------------

// GetAllocatedChattingServer

// int32 error = 1;
inline void GetAllocatedChattingServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t GetAllocatedChattingServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t GetAllocatedChattingServer::error() const {
  // @@protoc_insertion_point(field_get:message.GetAllocatedChattingServer.error)
  return _internal_error();
}
inline void GetAllocatedChattingServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void GetAllocatedChattingServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetAllocatedChattingServer.error)
}

// string host = 2;
inline void GetAllocatedChattingServer::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& GetAllocatedChattingServer::host() const {
  // @@protoc_insertion_point(field_get:message.GetAllocatedChattingServer.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAllocatedChattingServer::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetAllocatedChattingServer.host)
}
inline std::string* GetAllocatedChattingServer::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:message.GetAllocatedChattingServer.host)
  return _s;
}
inline const std::string& GetAllocatedChattingServer::_internal_host() const {
  return _impl_.host_.Get();
}
inline void GetAllocatedChattingServer::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAllocatedChattingServer::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAllocatedChattingServer::release_host() {
  // @@protoc_insertion_point(field_release:message.GetAllocatedChattingServer.host)
  return _impl_.host_.Release();
}
inline void GetAllocatedChattingServer::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetAllocatedChattingServer.host)
}

// string port = 3;
inline void GetAllocatedChattingServer::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& GetAllocatedChattingServer::port() const {
  // @@protoc_insertion_point(field_get:message.GetAllocatedChattingServer.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAllocatedChattingServer::set_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetAllocatedChattingServer.port)
}
inline std::string* GetAllocatedChattingServer::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:message.GetAllocatedChattingServer.port)
  return _s;
}
inline const std::string& GetAllocatedChattingServer::_internal_port() const {
  return _impl_.port_.Get();
}
inline void GetAllocatedChattingServer::_internal_set_port(const std::string& value) {
  
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAllocatedChattingServer::_internal_mutable_port() {
  
  return _impl_.port_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAllocatedChattingServer::release_port() {
  // @@protoc_insertion_point(field_release:message.GetAllocatedChattingServer.port)
  return _impl_.port_.Release();
}
inline void GetAllocatedChattingServer::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  _impl_.port_.SetAllocated(port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetAllocatedChattingServer.port)
}

// string token = 4;
inline void GetAllocatedChattingServer::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& GetAllocatedChattingServer::token() const {
  // @@protoc_insertion_point(field_get:message.GetAllocatedChattingServer.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAllocatedChattingServer::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GetAllocatedChattingServer.token)
}
inline std::string* GetAllocatedChattingServer::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message.GetAllocatedChattingServer.token)
  return _s;
}
inline const std::string& GetAllocatedChattingServer::_internal_token() const {
  return _impl_.token_.Get();
}
inline void GetAllocatedChattingServer::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAllocatedChattingServer::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAllocatedChattingServer::release_token() {
  // @@protoc_insertion_point(field_release:message.GetAllocatedChattingServer.token)
  return _impl_.token_.Release();
}
inline void GetAllocatedChattingServer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GetAllocatedChattingServer.token)
}

// -------------------------------------------------------------------

// LoginChattingServer

// int32 uuid = 1;
inline void LoginChattingServer::clear_uuid() {
  _impl_.uuid_ = 0;
}
inline int32_t LoginChattingServer::_internal_uuid() const {
  return _impl_.uuid_;
}
inline int32_t LoginChattingServer::uuid() const {
  // @@protoc_insertion_point(field_get:message.LoginChattingServer.uuid)
  return _internal_uuid();
}
inline void LoginChattingServer::_internal_set_uuid(int32_t value) {
  
  _impl_.uuid_ = value;
}
inline void LoginChattingServer::set_uuid(int32_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:message.LoginChattingServer.uuid)
}

// string token = 2;
inline void LoginChattingServer::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginChattingServer::token() const {
  // @@protoc_insertion_point(field_get:message.LoginChattingServer.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginChattingServer::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.LoginChattingServer.token)
}
inline std::string* LoginChattingServer::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message.LoginChattingServer.token)
  return _s;
}
inline const std::string& LoginChattingServer::_internal_token() const {
  return _impl_.token_.Get();
}
inline void LoginChattingServer::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginChattingServer::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginChattingServer::release_token() {
  // @@protoc_insertion_point(field_release:message.LoginChattingServer.token)
  return _impl_.token_.Release();
}
inline void LoginChattingServer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.LoginChattingServer.token)
}

// -------------------------------------------------------------------

// LoginChattingResponse

// int32 error = 1;
inline void LoginChattingResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t LoginChattingResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t LoginChattingResponse::error() const {
  // @@protoc_insertion_point(field_get:message.LoginChattingResponse.error)
  return _internal_error();
}
inline void LoginChattingResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void LoginChattingResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.LoginChattingResponse.error)
}

// -------------------------------------------------------------------

// ServerInfo

// string name = 1;
inline void ServerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:message.ServerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.ServerInfo.name)
}
inline std::string* ServerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.ServerInfo.name)
  return _s;
}
inline const std::string& ServerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:message.ServerInfo.name)
  return _impl_.name_.Release();
}
inline void ServerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.ServerInfo.name)
}

// string host = 2;
inline void ServerInfo::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& ServerInfo::host() const {
  // @@protoc_insertion_point(field_get:message.ServerInfo.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.ServerInfo.host)
}
inline std::string* ServerInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:message.ServerInfo.host)
  return _s;
}
inline const std::string& ServerInfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void ServerInfo::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_host() {
  // @@protoc_insertion_point(field_release:message.ServerInfo.host)
  return _impl_.host_.Release();
}
inline void ServerInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.ServerInfo.host)
}

// string port = 3;
inline void ServerInfo::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:message.ServerInfo.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.ServerInfo.port)
}
inline std::string* ServerInfo::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:message.ServerInfo.port)
  return _s;
}
inline const std::string& ServerInfo::_internal_port() const {
  return _impl_.port_.Get();
}
inline void ServerInfo::_internal_set_port(const std::string& value) {
  
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_port() {
  
  return _impl_.port_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_port() {
  // @@protoc_insertion_point(field_release:message.ServerInfo.port)
  return _impl_.port_.Release();
}
inline void ServerInfo::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  _impl_.port_.SetAllocated(port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.ServerInfo.port)
}

// -------------------------------------------------------------------

// PeerListsRequest

// string cur_server = 1;
inline void PeerListsRequest::clear_cur_server() {
  _impl_.cur_server_.ClearToEmpty();
}
inline const std::string& PeerListsRequest::cur_server() const {
  // @@protoc_insertion_point(field_get:message.PeerListsRequest.cur_server)
  return _internal_cur_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerListsRequest::set_cur_server(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cur_server_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.PeerListsRequest.cur_server)
}
inline std::string* PeerListsRequest::mutable_cur_server() {
  std::string* _s = _internal_mutable_cur_server();
  // @@protoc_insertion_point(field_mutable:message.PeerListsRequest.cur_server)
  return _s;
}
inline const std::string& PeerListsRequest::_internal_cur_server() const {
  return _impl_.cur_server_.Get();
}
inline void PeerListsRequest::_internal_set_cur_server(const std::string& value) {
  
  _impl_.cur_server_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerListsRequest::_internal_mutable_cur_server() {
  
  return _impl_.cur_server_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerListsRequest::release_cur_server() {
  // @@protoc_insertion_point(field_release:message.PeerListsRequest.cur_server)
  return _impl_.cur_server_.Release();
}
inline void PeerListsRequest::set_allocated_cur_server(std::string* cur_server) {
  if (cur_server != nullptr) {
    
  } else {
    
  }
  _impl_.cur_server_.SetAllocated(cur_server, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cur_server_.IsDefault()) {
    _impl_.cur_server_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.PeerListsRequest.cur_server)
}

// -------------------------------------------------------------------

// PeerResponse

// int32 error = 1;
inline void PeerResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t PeerResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t PeerResponse::error() const {
  // @@protoc_insertion_point(field_get:message.PeerResponse.error)
  return _internal_error();
}
inline void PeerResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void PeerResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.PeerResponse.error)
}

// repeated .message.ServerInfo lists = 2;
inline int PeerResponse::_internal_lists_size() const {
  return _impl_.lists_.size();
}
inline int PeerResponse::lists_size() const {
  return _internal_lists_size();
}
inline void PeerResponse::clear_lists() {
  _impl_.lists_.Clear();
}
inline ::message::ServerInfo* PeerResponse::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:message.PeerResponse.lists)
  return _impl_.lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ServerInfo >*
PeerResponse::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:message.PeerResponse.lists)
  return &_impl_.lists_;
}
inline const ::message::ServerInfo& PeerResponse::_internal_lists(int index) const {
  return _impl_.lists_.Get(index);
}
inline const ::message::ServerInfo& PeerResponse::lists(int index) const {
  // @@protoc_insertion_point(field_get:message.PeerResponse.lists)
  return _internal_lists(index);
}
inline ::message::ServerInfo* PeerResponse::_internal_add_lists() {
  return _impl_.lists_.Add();
}
inline ::message::ServerInfo* PeerResponse::add_lists() {
  ::message::ServerInfo* _add = _internal_add_lists();
  // @@protoc_insertion_point(field_add:message.PeerResponse.lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ServerInfo >&
PeerResponse::lists() const {
  // @@protoc_insertion_point(field_list:message.PeerResponse.lists)
  return _impl_.lists_;
}

// -------------------------------------------------------------------

// GrpcChattingServerRegRequest

// .message.ServerInfo info = 1;
inline bool GrpcChattingServerRegRequest::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool GrpcChattingServerRegRequest::has_info() const {
  return _internal_has_info();
}
inline void GrpcChattingServerRegRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::message::ServerInfo& GrpcChattingServerRegRequest::_internal_info() const {
  const ::message::ServerInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ServerInfo&>(
      ::message::_ServerInfo_default_instance_);
}
inline const ::message::ServerInfo& GrpcChattingServerRegRequest::info() const {
  // @@protoc_insertion_point(field_get:message.GrpcChattingServerRegRequest.info)
  return _internal_info();
}
inline void GrpcChattingServerRegRequest::unsafe_arena_set_allocated_info(
    ::message::ServerInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.GrpcChattingServerRegRequest.info)
}
inline ::message::ServerInfo* GrpcChattingServerRegRequest::release_info() {
  
  ::message::ServerInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ServerInfo* GrpcChattingServerRegRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:message.GrpcChattingServerRegRequest.info)
  
  ::message::ServerInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::message::ServerInfo* GrpcChattingServerRegRequest::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ServerInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::message::ServerInfo* GrpcChattingServerRegRequest::mutable_info() {
  ::message::ServerInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:message.GrpcChattingServerRegRequest.info)
  return _msg;
}
inline void GrpcChattingServerRegRequest::set_allocated_info(::message::ServerInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:message.GrpcChattingServerRegRequest.info)
}

// -------------------------------------------------------------------

// GrpcChattingServerShutdownRequest

// string cur_server = 1;
inline void GrpcChattingServerShutdownRequest::clear_cur_server() {
  _impl_.cur_server_.ClearToEmpty();
}
inline const std::string& GrpcChattingServerShutdownRequest::cur_server() const {
  // @@protoc_insertion_point(field_get:message.GrpcChattingServerShutdownRequest.cur_server)
  return _internal_cur_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GrpcChattingServerShutdownRequest::set_cur_server(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cur_server_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.GrpcChattingServerShutdownRequest.cur_server)
}
inline std::string* GrpcChattingServerShutdownRequest::mutable_cur_server() {
  std::string* _s = _internal_mutable_cur_server();
  // @@protoc_insertion_point(field_mutable:message.GrpcChattingServerShutdownRequest.cur_server)
  return _s;
}
inline const std::string& GrpcChattingServerShutdownRequest::_internal_cur_server() const {
  return _impl_.cur_server_.Get();
}
inline void GrpcChattingServerShutdownRequest::_internal_set_cur_server(const std::string& value) {
  
  _impl_.cur_server_.Set(value, GetArenaForAllocation());
}
inline std::string* GrpcChattingServerShutdownRequest::_internal_mutable_cur_server() {
  
  return _impl_.cur_server_.Mutable(GetArenaForAllocation());
}
inline std::string* GrpcChattingServerShutdownRequest::release_cur_server() {
  // @@protoc_insertion_point(field_release:message.GrpcChattingServerShutdownRequest.cur_server)
  return _impl_.cur_server_.Release();
}
inline void GrpcChattingServerShutdownRequest::set_allocated_cur_server(std::string* cur_server) {
  if (cur_server != nullptr) {
    
  } else {
    
  }
  _impl_.cur_server_.SetAllocated(cur_server, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cur_server_.IsDefault()) {
    _impl_.cur_server_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.GrpcChattingServerShutdownRequest.cur_server)
}

// -------------------------------------------------------------------

// GrpcChattingServerResponse

// int32 error = 1;
inline void GrpcChattingServerResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t GrpcChattingServerResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t GrpcChattingServerResponse::error() const {
  // @@protoc_insertion_point(field_get:message.GrpcChattingServerResponse.error)
  return _internal_error();
}
inline void GrpcChattingServerResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void GrpcChattingServerResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GrpcChattingServerResponse.error)
}

// -------------------------------------------------------------------

// FriendRequest

// int32 src_uuid = 1;
inline void FriendRequest::clear_src_uuid() {
  _impl_.src_uuid_ = 0;
}
inline int32_t FriendRequest::_internal_src_uuid() const {
  return _impl_.src_uuid_;
}
inline int32_t FriendRequest::src_uuid() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.src_uuid)
  return _internal_src_uuid();
}
inline void FriendRequest::_internal_set_src_uuid(int32_t value) {
  
  _impl_.src_uuid_ = value;
}
inline void FriendRequest::set_src_uuid(int32_t value) {
  _internal_set_src_uuid(value);
  // @@protoc_insertion_point(field_set:message.FriendRequest.src_uuid)
}

// int32 dst_uuid = 2;
inline void FriendRequest::clear_dst_uuid() {
  _impl_.dst_uuid_ = 0;
}
inline int32_t FriendRequest::_internal_dst_uuid() const {
  return _impl_.dst_uuid_;
}
inline int32_t FriendRequest::dst_uuid() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.dst_uuid)
  return _internal_dst_uuid();
}
inline void FriendRequest::_internal_set_dst_uuid(int32_t value) {
  
  _impl_.dst_uuid_ = value;
}
inline void FriendRequest::set_dst_uuid(int32_t value) {
  _internal_set_dst_uuid(value);
  // @@protoc_insertion_point(field_set:message.FriendRequest.dst_uuid)
}

// string nick_name = 3;
inline void FriendRequest::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& FriendRequest::nick_name() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequest::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.FriendRequest.nick_name)
}
inline std::string* FriendRequest::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:message.FriendRequest.nick_name)
  return _s;
}
inline const std::string& FriendRequest::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void FriendRequest::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequest::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequest::release_nick_name() {
  // @@protoc_insertion_point(field_release:message.FriendRequest.nick_name)
  return _impl_.nick_name_.Release();
}
inline void FriendRequest::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.FriendRequest.nick_name)
}

// string req_msg = 4;
inline void FriendRequest::clear_req_msg() {
  _impl_.req_msg_.ClearToEmpty();
}
inline const std::string& FriendRequest::req_msg() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.req_msg)
  return _internal_req_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequest::set_req_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.req_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.FriendRequest.req_msg)
}
inline std::string* FriendRequest::mutable_req_msg() {
  std::string* _s = _internal_mutable_req_msg();
  // @@protoc_insertion_point(field_mutable:message.FriendRequest.req_msg)
  return _s;
}
inline const std::string& FriendRequest::_internal_req_msg() const {
  return _impl_.req_msg_.Get();
}
inline void FriendRequest::_internal_set_req_msg(const std::string& value) {
  
  _impl_.req_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequest::_internal_mutable_req_msg() {
  
  return _impl_.req_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequest::release_req_msg() {
  // @@protoc_insertion_point(field_release:message.FriendRequest.req_msg)
  return _impl_.req_msg_.Release();
}
inline void FriendRequest::set_allocated_req_msg(std::string* req_msg) {
  if (req_msg != nullptr) {
    
  } else {
    
  }
  _impl_.req_msg_.SetAllocated(req_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.req_msg_.IsDefault()) {
    _impl_.req_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.FriendRequest.req_msg)
}

// string avator_path = 5;
inline void FriendRequest::clear_avator_path() {
  _impl_.avator_path_.ClearToEmpty();
}
inline const std::string& FriendRequest::avator_path() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.avator_path)
  return _internal_avator_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequest::set_avator_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avator_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.FriendRequest.avator_path)
}
inline std::string* FriendRequest::mutable_avator_path() {
  std::string* _s = _internal_mutable_avator_path();
  // @@protoc_insertion_point(field_mutable:message.FriendRequest.avator_path)
  return _s;
}
inline const std::string& FriendRequest::_internal_avator_path() const {
  return _impl_.avator_path_.Get();
}
inline void FriendRequest::_internal_set_avator_path(const std::string& value) {
  
  _impl_.avator_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequest::_internal_mutable_avator_path() {
  
  return _impl_.avator_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequest::release_avator_path() {
  // @@protoc_insertion_point(field_release:message.FriendRequest.avator_path)
  return _impl_.avator_path_.Release();
}
inline void FriendRequest::set_allocated_avator_path(std::string* avator_path) {
  if (avator_path != nullptr) {
    
  } else {
    
  }
  _impl_.avator_path_.SetAllocated(avator_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avator_path_.IsDefault()) {
    _impl_.avator_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.FriendRequest.avator_path)
}

// string username = 6;
inline void FriendRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& FriendRequest::username() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.FriendRequest.username)
}
inline std::string* FriendRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:message.FriendRequest.username)
  return _s;
}
inline const std::string& FriendRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void FriendRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:message.FriendRequest.username)
  return _impl_.username_.Release();
}
inline void FriendRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.FriendRequest.username)
}

// string description = 7;
inline void FriendRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& FriendRequest::description() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.FriendRequest.description)
}
inline std::string* FriendRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:message.FriendRequest.description)
  return _s;
}
inline const std::string& FriendRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void FriendRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequest::release_description() {
  // @@protoc_insertion_point(field_release:message.FriendRequest.description)
  return _impl_.description_.Release();
}
inline void FriendRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.FriendRequest.description)
}

// int32 sex = 8;
inline void FriendRequest::clear_sex() {
  _impl_.sex_ = 0;
}
inline int32_t FriendRequest::_internal_sex() const {
  return _impl_.sex_;
}
inline int32_t FriendRequest::sex() const {
  // @@protoc_insertion_point(field_get:message.FriendRequest.sex)
  return _internal_sex();
}
inline void FriendRequest::_internal_set_sex(int32_t value) {
  
  _impl_.sex_ = value;
}
inline void FriendRequest::set_sex(int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:message.FriendRequest.sex)
}

// -------------------------------------------------------------------

// FriendResponse

// int32 error = 1;
inline void FriendResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t FriendResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t FriendResponse::error() const {
  // @@protoc_insertion_point(field_get:message.FriendResponse.error)
  return _internal_error();
}
inline void FriendResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void FriendResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.FriendResponse.error)
}

// int32 src_uuid = 2;
inline void FriendResponse::clear_src_uuid() {
  _impl_.src_uuid_ = 0;
}
inline int32_t FriendResponse::_internal_src_uuid() const {
  return _impl_.src_uuid_;
}
inline int32_t FriendResponse::src_uuid() const {
  // @@protoc_insertion_point(field_get:message.FriendResponse.src_uuid)
  return _internal_src_uuid();
}
inline void FriendResponse::_internal_set_src_uuid(int32_t value) {
  
  _impl_.src_uuid_ = value;
}
inline void FriendResponse::set_src_uuid(int32_t value) {
  _internal_set_src_uuid(value);
  // @@protoc_insertion_point(field_set:message.FriendResponse.src_uuid)
}

// int32 dst_uuid = 3;
inline void FriendResponse::clear_dst_uuid() {
  _impl_.dst_uuid_ = 0;
}
inline int32_t FriendResponse::_internal_dst_uuid() const {
  return _impl_.dst_uuid_;
}
inline int32_t FriendResponse::dst_uuid() const {
  // @@protoc_insertion_point(field_get:message.FriendResponse.dst_uuid)
  return _internal_dst_uuid();
}
inline void FriendResponse::_internal_set_dst_uuid(int32_t value) {
  
  _impl_.dst_uuid_ = value;
}
inline void FriendResponse::set_dst_uuid(int32_t value) {
  _internal_set_dst_uuid(value);
  // @@protoc_insertion_point(field_set:message.FriendResponse.dst_uuid)
}

// -------------------------------------------------------------------

// AuthoriseRequest

// int32 src_uuid = 1;
inline void AuthoriseRequest::clear_src_uuid() {
  _impl_.src_uuid_ = 0;
}
inline int32_t AuthoriseRequest::_internal_src_uuid() const {
  return _impl_.src_uuid_;
}
inline int32_t AuthoriseRequest::src_uuid() const {
  // @@protoc_insertion_point(field_get:message.AuthoriseRequest.src_uuid)
  return _internal_src_uuid();
}
inline void AuthoriseRequest::_internal_set_src_uuid(int32_t value) {
  
  _impl_.src_uuid_ = value;
}
inline void AuthoriseRequest::set_src_uuid(int32_t value) {
  _internal_set_src_uuid(value);
  // @@protoc_insertion_point(field_set:message.AuthoriseRequest.src_uuid)
}

// int32 dst_uuid = 2;
inline void AuthoriseRequest::clear_dst_uuid() {
  _impl_.dst_uuid_ = 0;
}
inline int32_t AuthoriseRequest::_internal_dst_uuid() const {
  return _impl_.dst_uuid_;
}
inline int32_t AuthoriseRequest::dst_uuid() const {
  // @@protoc_insertion_point(field_get:message.AuthoriseRequest.dst_uuid)
  return _internal_dst_uuid();
}
inline void AuthoriseRequest::_internal_set_dst_uuid(int32_t value) {
  
  _impl_.dst_uuid_ = value;
}
inline void AuthoriseRequest::set_dst_uuid(int32_t value) {
  _internal_set_dst_uuid(value);
  // @@protoc_insertion_point(field_set:message.AuthoriseRequest.dst_uuid)
}

// -------------------------------------------------------------------

// AuthoriseResponse

// int32 error = 1;
inline void AuthoriseResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t AuthoriseResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t AuthoriseResponse::error() const {
  // @@protoc_insertion_point(field_get:message.AuthoriseResponse.error)
  return _internal_error();
}
inline void AuthoriseResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void AuthoriseResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.AuthoriseResponse.error)
}

// int32 src_uuid = 2;
inline void AuthoriseResponse::clear_src_uuid() {
  _impl_.src_uuid_ = 0;
}
inline int32_t AuthoriseResponse::_internal_src_uuid() const {
  return _impl_.src_uuid_;
}
inline int32_t AuthoriseResponse::src_uuid() const {
  // @@protoc_insertion_point(field_get:message.AuthoriseResponse.src_uuid)
  return _internal_src_uuid();
}
inline void AuthoriseResponse::_internal_set_src_uuid(int32_t value) {
  
  _impl_.src_uuid_ = value;
}
inline void AuthoriseResponse::set_src_uuid(int32_t value) {
  _internal_set_src_uuid(value);
  // @@protoc_insertion_point(field_set:message.AuthoriseResponse.src_uuid)
}

// int32 dst_uuid = 3;
inline void AuthoriseResponse::clear_dst_uuid() {
  _impl_.dst_uuid_ = 0;
}
inline int32_t AuthoriseResponse::_internal_dst_uuid() const {
  return _impl_.dst_uuid_;
}
inline int32_t AuthoriseResponse::dst_uuid() const {
  // @@protoc_insertion_point(field_get:message.AuthoriseResponse.dst_uuid)
  return _internal_dst_uuid();
}
inline void AuthoriseResponse::_internal_set_dst_uuid(int32_t value) {
  
  _impl_.dst_uuid_ = value;
}
inline void AuthoriseResponse::set_dst_uuid(int32_t value) {
  _internal_set_dst_uuid(value);
  // @@protoc_insertion_point(field_set:message.AuthoriseResponse.dst_uuid)
}

// -------------------------------------------------------------------

// SendChattingMsgRequest

// int32 src_uuid = 1;
inline void SendChattingMsgRequest::clear_src_uuid() {
  _impl_.src_uuid_ = 0;
}
inline int32_t SendChattingMsgRequest::_internal_src_uuid() const {
  return _impl_.src_uuid_;
}
inline int32_t SendChattingMsgRequest::src_uuid() const {
  // @@protoc_insertion_point(field_get:message.SendChattingMsgRequest.src_uuid)
  return _internal_src_uuid();
}
inline void SendChattingMsgRequest::_internal_set_src_uuid(int32_t value) {
  
  _impl_.src_uuid_ = value;
}
inline void SendChattingMsgRequest::set_src_uuid(int32_t value) {
  _internal_set_src_uuid(value);
  // @@protoc_insertion_point(field_set:message.SendChattingMsgRequest.src_uuid)
}

// int32 dst_uuid = 2;
inline void SendChattingMsgRequest::clear_dst_uuid() {
  _impl_.dst_uuid_ = 0;
}
inline int32_t SendChattingMsgRequest::_internal_dst_uuid() const {
  return _impl_.dst_uuid_;
}
inline int32_t SendChattingMsgRequest::dst_uuid() const {
  // @@protoc_insertion_point(field_get:message.SendChattingMsgRequest.dst_uuid)
  return _internal_dst_uuid();
}
inline void SendChattingMsgRequest::_internal_set_dst_uuid(int32_t value) {
  
  _impl_.dst_uuid_ = value;
}
inline void SendChattingMsgRequest::set_dst_uuid(int32_t value) {
  _internal_set_dst_uuid(value);
  // @@protoc_insertion_point(field_set:message.SendChattingMsgRequest.dst_uuid)
}

// string message = 3;
inline void SendChattingMsgRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SendChattingMsgRequest::message() const {
  // @@protoc_insertion_point(field_get:message.SendChattingMsgRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendChattingMsgRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SendChattingMsgRequest.message)
}
inline std::string* SendChattingMsgRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:message.SendChattingMsgRequest.message)
  return _s;
}
inline const std::string& SendChattingMsgRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SendChattingMsgRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SendChattingMsgRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SendChattingMsgRequest::release_message() {
  // @@protoc_insertion_point(field_release:message.SendChattingMsgRequest.message)
  return _impl_.message_.Release();
}
inline void SendChattingMsgRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SendChattingMsgRequest.message)
}

// -------------------------------------------------------------------

// SendChattingMsgResponse

// int32 error = 1;
inline void SendChattingMsgResponse::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t SendChattingMsgResponse::_internal_error() const {
  return _impl_.error_;
}
inline int32_t SendChattingMsgResponse::error() const {
  // @@protoc_insertion_point(field_get:message.SendChattingMsgResponse.error)
  return _internal_error();
}
inline void SendChattingMsgResponse::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void SendChattingMsgResponse::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.SendChattingMsgResponse.error)
}

// int32 src_uuid = 2;
inline void SendChattingMsgResponse::clear_src_uuid() {
  _impl_.src_uuid_ = 0;
}
inline int32_t SendChattingMsgResponse::_internal_src_uuid() const {
  return _impl_.src_uuid_;
}
inline int32_t SendChattingMsgResponse::src_uuid() const {
  // @@protoc_insertion_point(field_get:message.SendChattingMsgResponse.src_uuid)
  return _internal_src_uuid();
}
inline void SendChattingMsgResponse::_internal_set_src_uuid(int32_t value) {
  
  _impl_.src_uuid_ = value;
}
inline void SendChattingMsgResponse::set_src_uuid(int32_t value) {
  _internal_set_src_uuid(value);
  // @@protoc_insertion_point(field_set:message.SendChattingMsgResponse.src_uuid)
}

// int32 dst_uuid = 3;
inline void SendChattingMsgResponse::clear_dst_uuid() {
  _impl_.dst_uuid_ = 0;
}
inline int32_t SendChattingMsgResponse::_internal_dst_uuid() const {
  return _impl_.dst_uuid_;
}
inline int32_t SendChattingMsgResponse::dst_uuid() const {
  // @@protoc_insertion_point(field_get:message.SendChattingMsgResponse.dst_uuid)
  return _internal_dst_uuid();
}
inline void SendChattingMsgResponse::_internal_set_dst_uuid(int32_t value) {
  
  _impl_.dst_uuid_ = value;
}
inline void SendChattingMsgResponse::set_dst_uuid(int32_t value) {
  _internal_set_dst_uuid(value);
  // @@protoc_insertion_point(field_set:message.SendChattingMsgResponse.dst_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
