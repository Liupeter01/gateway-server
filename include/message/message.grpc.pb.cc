// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace message {

static const char* VerificationService_method_names[] = {
  "/message.VerificationService/GetVerificationCode",
};

std::unique_ptr< VerificationService::Stub> VerificationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VerificationService::Stub> stub(new VerificationService::Stub(channel, options));
  return stub;
}

VerificationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVerificationCode_(VerificationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VerificationService::Stub::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::message::GetVerificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVerificationCode_, context, request, response);
}

void VerificationService::Stub::async::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerificationCode_, context, request, response, std::move(f));
}

void VerificationService::Stub::async::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerificationCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* VerificationService::Stub::PrepareAsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetVerificationResponse, ::message::GetVerificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVerificationCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* VerificationService::Stub::AsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVerificationCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

VerificationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VerificationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VerificationService::Service, ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VerificationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GetVerificationRequest* req,
             ::message::GetVerificationResponse* resp) {
               return service->GetVerificationCode(ctx, req, resp);
             }, this)));
}

VerificationService::Service::~Service() {
}

::grpc::Status VerificationService::Service::GetVerificationCode(::grpc::ServerContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ChattingServiceBalancer_method_names[] = {
  "/message.ChattingServiceBalancer/AddNewUserToServer",
  "/message.ChattingServiceBalancer/UserLoginToServer",
};

std::unique_ptr< ChattingServiceBalancer::Stub> ChattingServiceBalancer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChattingServiceBalancer::Stub> stub(new ChattingServiceBalancer::Stub(channel, options));
  return stub;
}

ChattingServiceBalancer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddNewUserToServer_(ChattingServiceBalancer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLoginToServer_(ChattingServiceBalancer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChattingServiceBalancer::Stub::AddNewUserToServer(::grpc::ClientContext* context, const ::message::RegisterToBalancer& request, ::message::GetAllocatedChattingServer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RegisterToBalancer, ::message::GetAllocatedChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddNewUserToServer_, context, request, response);
}

void ChattingServiceBalancer::Stub::async::AddNewUserToServer(::grpc::ClientContext* context, const ::message::RegisterToBalancer* request, ::message::GetAllocatedChattingServer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RegisterToBalancer, ::message::GetAllocatedChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNewUserToServer_, context, request, response, std::move(f));
}

void ChattingServiceBalancer::Stub::async::AddNewUserToServer(::grpc::ClientContext* context, const ::message::RegisterToBalancer* request, ::message::GetAllocatedChattingServer* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNewUserToServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetAllocatedChattingServer>* ChattingServiceBalancer::Stub::PrepareAsyncAddNewUserToServerRaw(::grpc::ClientContext* context, const ::message::RegisterToBalancer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetAllocatedChattingServer, ::message::RegisterToBalancer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddNewUserToServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetAllocatedChattingServer>* ChattingServiceBalancer::Stub::AsyncAddNewUserToServerRaw(::grpc::ClientContext* context, const ::message::RegisterToBalancer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddNewUserToServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChattingServiceBalancer::Stub::UserLoginToServer(::grpc::ClientContext* context, const ::message::LoginChattingServer& request, ::message::LoginChattingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::LoginChattingServer, ::message::LoginChattingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLoginToServer_, context, request, response);
}

void ChattingServiceBalancer::Stub::async::UserLoginToServer(::grpc::ClientContext* context, const ::message::LoginChattingServer* request, ::message::LoginChattingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::LoginChattingServer, ::message::LoginChattingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoginToServer_, context, request, response, std::move(f));
}

void ChattingServiceBalancer::Stub::async::UserLoginToServer(::grpc::ClientContext* context, const ::message::LoginChattingServer* request, ::message::LoginChattingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoginToServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::LoginChattingResponse>* ChattingServiceBalancer::Stub::PrepareAsyncUserLoginToServerRaw(::grpc::ClientContext* context, const ::message::LoginChattingServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::LoginChattingResponse, ::message::LoginChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLoginToServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::LoginChattingResponse>* ChattingServiceBalancer::Stub::AsyncUserLoginToServerRaw(::grpc::ClientContext* context, const ::message::LoginChattingServer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoginToServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChattingServiceBalancer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingServiceBalancer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingServiceBalancer::Service, ::message::RegisterToBalancer, ::message::GetAllocatedChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingServiceBalancer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RegisterToBalancer* req,
             ::message::GetAllocatedChattingServer* resp) {
               return service->AddNewUserToServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingServiceBalancer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingServiceBalancer::Service, ::message::LoginChattingServer, ::message::LoginChattingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingServiceBalancer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::LoginChattingServer* req,
             ::message::LoginChattingResponse* resp) {
               return service->UserLoginToServer(ctx, req, resp);
             }, this)));
}

ChattingServiceBalancer::Service::~Service() {
}

::grpc::Status ChattingServiceBalancer::Service::AddNewUserToServer(::grpc::ServerContext* context, const ::message::RegisterToBalancer* request, ::message::GetAllocatedChattingServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChattingServiceBalancer::Service::UserLoginToServer(::grpc::ServerContext* context, const ::message::LoginChattingServer* request, ::message::LoginChattingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

