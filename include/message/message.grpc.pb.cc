// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace message {

static const char* VerificationService_method_names[] = {
  "/message.VerificationService/GetVerificationCode",
};

std::unique_ptr< VerificationService::Stub> VerificationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VerificationService::Stub> stub(new VerificationService::Stub(channel, options));
  return stub;
}

VerificationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVerificationCode_(VerificationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VerificationService::Stub::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::message::GetVerificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVerificationCode_, context, request, response);
}

void VerificationService::Stub::async::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerificationCode_, context, request, response, std::move(f));
}

void VerificationService::Stub::async::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerificationCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* VerificationService::Stub::PrepareAsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetVerificationResponse, ::message::GetVerificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVerificationCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* VerificationService::Stub::AsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVerificationCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

VerificationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VerificationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VerificationService::Service, ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VerificationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GetVerificationRequest* req,
             ::message::GetVerificationResponse* resp) {
               return service->GetVerificationCode(ctx, req, resp);
             }, this)));
}

VerificationService::Service::~Service() {
}

::grpc::Status VerificationService::Service::GetVerificationCode(::grpc::ServerContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BalancerService_method_names[] = {
  "/message.BalancerService/AddNewUserToServer",
  "/message.BalancerService/UserLoginToServer",
  "/message.BalancerService/RegisterChattingServerInstance",
  "/message.BalancerService/RegisterChattingGrpcServer",
  "/message.BalancerService/ChattingServerShutDown",
  "/message.BalancerService/ChattingGrpcServerShutDown",
  "/message.BalancerService/GetPeerChattingServerInfo",
  "/message.BalancerService/GetPeerGrpcServerInfo",
};

std::unique_ptr< BalancerService::Stub> BalancerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BalancerService::Stub> stub(new BalancerService::Stub(channel, options));
  return stub;
}

BalancerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddNewUserToServer_(BalancerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLoginToServer_(BalancerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterChattingServerInstance_(BalancerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterChattingGrpcServer_(BalancerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChattingServerShutDown_(BalancerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChattingGrpcServerShutDown_(BalancerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerChattingServerInfo_(BalancerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerGrpcServerInfo_(BalancerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BalancerService::Stub::AddNewUserToServer(::grpc::ClientContext* context, const ::message::RegisterToBalancer& request, ::message::GetAllocatedChattingServer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RegisterToBalancer, ::message::GetAllocatedChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddNewUserToServer_, context, request, response);
}

void BalancerService::Stub::async::AddNewUserToServer(::grpc::ClientContext* context, const ::message::RegisterToBalancer* request, ::message::GetAllocatedChattingServer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RegisterToBalancer, ::message::GetAllocatedChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNewUserToServer_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::AddNewUserToServer(::grpc::ClientContext* context, const ::message::RegisterToBalancer* request, ::message::GetAllocatedChattingServer* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNewUserToServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetAllocatedChattingServer>* BalancerService::Stub::PrepareAsyncAddNewUserToServerRaw(::grpc::ClientContext* context, const ::message::RegisterToBalancer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetAllocatedChattingServer, ::message::RegisterToBalancer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddNewUserToServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetAllocatedChattingServer>* BalancerService::Stub::AsyncAddNewUserToServerRaw(::grpc::ClientContext* context, const ::message::RegisterToBalancer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddNewUserToServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::UserLoginToServer(::grpc::ClientContext* context, const ::message::LoginChattingServer& request, ::message::LoginChattingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::LoginChattingServer, ::message::LoginChattingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLoginToServer_, context, request, response);
}

void BalancerService::Stub::async::UserLoginToServer(::grpc::ClientContext* context, const ::message::LoginChattingServer* request, ::message::LoginChattingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::LoginChattingServer, ::message::LoginChattingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoginToServer_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::UserLoginToServer(::grpc::ClientContext* context, const ::message::LoginChattingServer* request, ::message::LoginChattingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoginToServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::LoginChattingResponse>* BalancerService::Stub::PrepareAsyncUserLoginToServerRaw(::grpc::ClientContext* context, const ::message::LoginChattingServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::LoginChattingResponse, ::message::LoginChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLoginToServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::LoginChattingResponse>* BalancerService::Stub::AsyncUserLoginToServerRaw(::grpc::ClientContext* context, const ::message::LoginChattingServer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoginToServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::RegisterChattingServerInstance(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterChattingServerInstance_, context, request, response);
}

void BalancerService::Stub::async::RegisterChattingServerInstance(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterChattingServerInstance_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::RegisterChattingServerInstance(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterChattingServerInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::PrepareAsyncRegisterChattingServerInstanceRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterChattingServerInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::AsyncRegisterChattingServerInstanceRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterChattingServerInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::RegisterChattingGrpcServer(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterChattingGrpcServer_, context, request, response);
}

void BalancerService::Stub::async::RegisterChattingGrpcServer(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterChattingGrpcServer_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::RegisterChattingGrpcServer(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterChattingGrpcServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::PrepareAsyncRegisterChattingGrpcServerRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterChattingGrpcServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::AsyncRegisterChattingGrpcServerRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterChattingGrpcServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::ChattingServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChattingServerShutDown_, context, request, response);
}

void BalancerService::Stub::async::ChattingServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChattingServerShutDown_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::ChattingServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChattingServerShutDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::PrepareAsyncChattingServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChattingServerShutDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::AsyncChattingServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChattingServerShutDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::ChattingGrpcServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChattingGrpcServerShutDown_, context, request, response);
}

void BalancerService::Stub::async::ChattingGrpcServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChattingGrpcServerShutDown_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::ChattingGrpcServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChattingGrpcServerShutDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::PrepareAsyncChattingGrpcServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChattingGrpcServerShutDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* BalancerService::Stub::AsyncChattingGrpcServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChattingGrpcServerShutDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::GetPeerChattingServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeerChattingServerInfo_, context, request, response);
}

void BalancerService::Stub::async::GetPeerChattingServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerChattingServerInfo_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::GetPeerChattingServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerChattingServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* BalancerService::Stub::PrepareAsyncGetPeerChattingServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerListsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeerChattingServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* BalancerService::Stub::AsyncGetPeerChattingServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeerChattingServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BalancerService::Stub::GetPeerGrpcServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeerGrpcServerInfo_, context, request, response);
}

void BalancerService::Stub::async::GetPeerGrpcServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerGrpcServerInfo_, context, request, response, std::move(f));
}

void BalancerService::Stub::async::GetPeerGrpcServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerGrpcServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* BalancerService::Stub::PrepareAsyncGetPeerGrpcServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerListsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeerGrpcServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* BalancerService::Stub::AsyncGetPeerGrpcServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeerGrpcServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

BalancerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::RegisterToBalancer, ::message::GetAllocatedChattingServer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RegisterToBalancer* req,
             ::message::GetAllocatedChattingServer* resp) {
               return service->AddNewUserToServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::LoginChattingServer, ::message::LoginChattingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::LoginChattingServer* req,
             ::message::LoginChattingResponse* resp) {
               return service->UserLoginToServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcRegisterRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->RegisterChattingServerInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcRegisterRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->RegisterChattingGrpcServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcShutdownRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->ChattingServerShutDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcShutdownRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->ChattingGrpcServerShutDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerListsRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetPeerChattingServerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BalancerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BalancerService::Service, ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BalancerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerListsRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetPeerGrpcServerInfo(ctx, req, resp);
             }, this)));
}

BalancerService::Service::~Service() {
}

::grpc::Status BalancerService::Service::AddNewUserToServer(::grpc::ServerContext* context, const ::message::RegisterToBalancer* request, ::message::GetAllocatedChattingServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::UserLoginToServer(::grpc::ServerContext* context, const ::message::LoginChattingServer* request, ::message::LoginChattingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::RegisterChattingServerInstance(::grpc::ServerContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::RegisterChattingGrpcServer(::grpc::ServerContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::ChattingServerShutDown(::grpc::ServerContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::ChattingGrpcServerShutDown(::grpc::ServerContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::GetPeerChattingServerInfo(::grpc::ServerContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BalancerService::Service::GetPeerGrpcServerInfo(::grpc::ServerContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DistributedChattingService_method_names[] = {
  "/message.DistributedChattingService/SendFriendRequest",
  "/message.DistributedChattingService/ConfirmFriendRequest",
  "/message.DistributedChattingService/FriendshipVerification",
  "/message.DistributedChattingService/NormalChattingMsg",
};

std::unique_ptr< DistributedChattingService::Stub> DistributedChattingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DistributedChattingService::Stub> stub(new DistributedChattingService::Stub(channel, options));
  return stub;
}

DistributedChattingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendFriendRequest_(DistributedChattingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmFriendRequest_(DistributedChattingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FriendshipVerification_(DistributedChattingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NormalChattingMsg_(DistributedChattingService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DistributedChattingService::Stub::SendFriendRequest(::grpc::ClientContext* context, const ::message::FriendRequest& request, ::message::FriendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::FriendRequest, ::message::FriendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendFriendRequest_, context, request, response);
}

void DistributedChattingService::Stub::async::SendFriendRequest(::grpc::ClientContext* context, const ::message::FriendRequest* request, ::message::FriendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::FriendRequest, ::message::FriendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFriendRequest_, context, request, response, std::move(f));
}

void DistributedChattingService::Stub::async::SendFriendRequest(::grpc::ClientContext* context, const ::message::FriendRequest* request, ::message::FriendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFriendRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::FriendResponse>* DistributedChattingService::Stub::PrepareAsyncSendFriendRequestRaw(::grpc::ClientContext* context, const ::message::FriendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::FriendResponse, ::message::FriendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendFriendRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::FriendResponse>* DistributedChattingService::Stub::AsyncSendFriendRequestRaw(::grpc::ClientContext* context, const ::message::FriendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendFriendRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DistributedChattingService::Stub::ConfirmFriendRequest(::grpc::ClientContext* context, const ::message::FriendRequest& request, ::message::FriendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::FriendRequest, ::message::FriendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmFriendRequest_, context, request, response);
}

void DistributedChattingService::Stub::async::ConfirmFriendRequest(::grpc::ClientContext* context, const ::message::FriendRequest* request, ::message::FriendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::FriendRequest, ::message::FriendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmFriendRequest_, context, request, response, std::move(f));
}

void DistributedChattingService::Stub::async::ConfirmFriendRequest(::grpc::ClientContext* context, const ::message::FriendRequest* request, ::message::FriendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmFriendRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::FriendResponse>* DistributedChattingService::Stub::PrepareAsyncConfirmFriendRequestRaw(::grpc::ClientContext* context, const ::message::FriendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::FriendResponse, ::message::FriendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmFriendRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::FriendResponse>* DistributedChattingService::Stub::AsyncConfirmFriendRequestRaw(::grpc::ClientContext* context, const ::message::FriendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmFriendRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DistributedChattingService::Stub::FriendshipVerification(::grpc::ClientContext* context, const ::message::AuthoriseRequest& request, ::message::AuthoriseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::AuthoriseRequest, ::message::AuthoriseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FriendshipVerification_, context, request, response);
}

void DistributedChattingService::Stub::async::FriendshipVerification(::grpc::ClientContext* context, const ::message::AuthoriseRequest* request, ::message::AuthoriseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::AuthoriseRequest, ::message::AuthoriseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FriendshipVerification_, context, request, response, std::move(f));
}

void DistributedChattingService::Stub::async::FriendshipVerification(::grpc::ClientContext* context, const ::message::AuthoriseRequest* request, ::message::AuthoriseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FriendshipVerification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::AuthoriseResponse>* DistributedChattingService::Stub::PrepareAsyncFriendshipVerificationRaw(::grpc::ClientContext* context, const ::message::AuthoriseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::AuthoriseResponse, ::message::AuthoriseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FriendshipVerification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::AuthoriseResponse>* DistributedChattingService::Stub::AsyncFriendshipVerificationRaw(::grpc::ClientContext* context, const ::message::AuthoriseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFriendshipVerificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DistributedChattingService::Stub::NormalChattingMsg(::grpc::ClientContext* context, const ::message::SendChattingMsgRequest& request, ::message::SendChattingMsgResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::SendChattingMsgRequest, ::message::SendChattingMsgResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NormalChattingMsg_, context, request, response);
}

void DistributedChattingService::Stub::async::NormalChattingMsg(::grpc::ClientContext* context, const ::message::SendChattingMsgRequest* request, ::message::SendChattingMsgResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::SendChattingMsgRequest, ::message::SendChattingMsgResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NormalChattingMsg_, context, request, response, std::move(f));
}

void DistributedChattingService::Stub::async::NormalChattingMsg(::grpc::ClientContext* context, const ::message::SendChattingMsgRequest* request, ::message::SendChattingMsgResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NormalChattingMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::SendChattingMsgResponse>* DistributedChattingService::Stub::PrepareAsyncNormalChattingMsgRaw(::grpc::ClientContext* context, const ::message::SendChattingMsgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::SendChattingMsgResponse, ::message::SendChattingMsgRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NormalChattingMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::SendChattingMsgResponse>* DistributedChattingService::Stub::AsyncNormalChattingMsgRaw(::grpc::ClientContext* context, const ::message::SendChattingMsgRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNormalChattingMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

DistributedChattingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedChattingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedChattingService::Service, ::message::FriendRequest, ::message::FriendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DistributedChattingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::FriendRequest* req,
             ::message::FriendResponse* resp) {
               return service->SendFriendRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedChattingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedChattingService::Service, ::message::FriendRequest, ::message::FriendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DistributedChattingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::FriendRequest* req,
             ::message::FriendResponse* resp) {
               return service->ConfirmFriendRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedChattingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedChattingService::Service, ::message::AuthoriseRequest, ::message::AuthoriseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DistributedChattingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::AuthoriseRequest* req,
             ::message::AuthoriseResponse* resp) {
               return service->FriendshipVerification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedChattingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedChattingService::Service, ::message::SendChattingMsgRequest, ::message::SendChattingMsgResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DistributedChattingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::SendChattingMsgRequest* req,
             ::message::SendChattingMsgResponse* resp) {
               return service->NormalChattingMsg(ctx, req, resp);
             }, this)));
}

DistributedChattingService::Service::~Service() {
}

::grpc::Status DistributedChattingService::Service::SendFriendRequest(::grpc::ServerContext* context, const ::message::FriendRequest* request, ::message::FriendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedChattingService::Service::ConfirmFriendRequest(::grpc::ServerContext* context, const ::message::FriendRequest* request, ::message::FriendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedChattingService::Service::FriendshipVerification(::grpc::ServerContext* context, const ::message::AuthoriseRequest* request, ::message::AuthoriseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedChattingService::Service::NormalChattingMsg(::grpc::ServerContext* context, const ::message::SendChattingMsgRequest* request, ::message::SendChattingMsgResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

